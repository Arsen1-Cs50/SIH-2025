// src/chatbot/ChatbotService.js
const JHARKHAND_KNOWLEDGE = {
  destinations: {
    netarhat: {
      name: "Netarhat",
      hindiName: "‡§®‡•á‡§§‡§∞‡§π‡§æ‡§ü",
      description: "Netarhat is known as the 'Queen of Chotanagpur' and is famous for its breathtaking sunrises and sunsets. It's a perfect hill station for nature lovers.",
      hindiDescription: "‡§®‡•á‡§§‡§∞‡§π‡§æ‡§ü '‡§õ‡•ã‡§ü‡§æ‡§®‡§æ‡§ó‡§™‡•Å‡§∞ ‡§ï‡•Ä ‡§∞‡§æ‡§®‡•Ä' ‡§ï‡•á ‡§®‡§æ‡§Æ ‡§∏‡•á ‡§ú‡§æ‡§®‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§Ö‡§™‡§®‡•á ‡§≤‡•Å‡§≠‡§æ‡§µ‡§®‡•á ‡§∏‡•Ç‡§∞‡•ç‡§Ø‡•ã‡§¶‡§Ø ‡§î‡§∞ ‡§∏‡•Ç‡§∞‡•ç‡§Ø‡§æ‡§∏‡•ç‡§§ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡§∏‡§ø‡§¶‡•ç‡§ß ‡§π‡•à‡•§ ‡§Ø‡§π ‡§™‡•ç‡§∞‡§ï‡•É‡§§‡§ø ‡§™‡•ç‡§∞‡•á‡§Æ‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§Ü‡§¶‡§∞‡•ç‡§∂ ‡§π‡§ø‡§≤ ‡§∏‡•ç‡§ü‡•á‡§∂‡§® ‡§π‡•à‡•§",
      highlights: ["Sunrise Point", "Sunset Point", "Upper Ghaghri Falls", "Lower Ghaghri Falls", "Magnolia Point"],
      hindiHighlights: ["‡§∏‡§®‡§∞‡§æ‡§á‡§ú ‡§™‡•â‡§á‡§Ç‡§ü", "‡§∏‡§®‡§∏‡•á‡§ü ‡§™‡•â‡§á‡§Ç‡§ü", "‡§Ö‡§™‡§∞ ‡§ò‡§æ‡§ò‡§∞‡•Ä ‡§´‡•â‡§≤‡•ç‡§∏", "‡§≤‡•ã‡§Ö‡§∞ ‡§ò‡§æ‡§ò‡§∞‡•Ä ‡§´‡•â‡§≤‡•ç‡§∏", "‡§Æ‡•à‡§ó‡•ç‡§®‡•ã‡§≤‡§ø‡§Ø‡§æ ‡§™‡•â‡§á‡§Ç‡§ü"],
      best_time: "October to March",
      hindiBestTime: "‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞ ‡§∏‡•á ‡§Æ‡§æ‡§∞‡•ç‡§ö",
      type: ["eco-tourism", "hill station"],
    },
    ranchi: {
      name: "Ranchi",
      hindiName: "‡§∞‡§æ‡§Ç‡§ö‡•Ä",
      description: "Capital city of Jharkhand, known for its waterfalls, temples, and pleasant climate.",
      hindiDescription: "‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§ï‡•Ä ‡§∞‡§æ‡§ú‡§ß‡§æ‡§®‡•Ä ‡§∂‡§π‡§∞, ‡§Ö‡§™‡§®‡•á ‡§ù‡§∞‡§®‡•ã‡§Ç, ‡§Æ‡§Ç‡§¶‡§ø‡§∞‡•ã‡§Ç ‡§î‡§∞ ‡§∏‡•Å‡§π‡§æ‡§µ‡§®‡•á ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡§æ‡§®‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§",
      highlights: ["Hundru Falls", "Jonha Falls", "Rock Garden", "Tagore Hill", "Pahari Mandir"],
      hindiHighlights: ["‡§π‡•Å‡§Ç‡§°‡§∞‡•Ç ‡§´‡•â‡§≤‡•ç‡§∏", "‡§ú‡•ã‡§®‡•ç‡§π‡§æ ‡§´‡•â‡§≤‡•ç‡§∏", "‡§∞‡•â‡§ï ‡§ó‡§æ‡§∞‡•ç‡§°‡§®", "‡§ü‡•à‡§ó‡•ã‡§∞ ‡§π‡§ø‡§≤", "‡§™‡§π‡§æ‡§°‡§º‡•Ä ‡§Æ‡§Ç‡§¶‡§ø‡§∞"],
      best_time: "Throughout the year",
      hindiBestTime: "‡§™‡•Ç‡§∞‡•á ‡§∏‡§æ‡§≤",
      type: ["cultural", "eco-tourism"],
    },
    jamshedpur: {
      name: "Jamshedpur",
      hindiName: "‡§ú‡§Æ‡§∂‡•á‡§¶‡§™‡•Å‡§∞",
      description: "Known as the 'Steel City of India', Jamshedpur is an industrial city with beautiful parks and the famous Jubilee Park.",
      hindiDescription: "'‡§≠‡§æ‡§∞‡§§ ‡§ï‡•Ä ‡§∏‡•ç‡§ü‡•Ä‡§≤ ‡§∏‡§ø‡§ü‡•Ä' ‡§ï‡•á ‡§®‡§æ‡§Æ ‡§∏‡•á ‡§Æ‡§∂‡§π‡•Ç‡§∞ ‡§ú‡§Æ‡§∂‡•á‡§¶‡§™‡•Å‡§∞ ‡§è‡§ï ‡§î‡§¶‡•ç‡§Ø‡•ã‡§ó‡§ø‡§ï ‡§∂‡§π‡§∞ ‡§π‡•à ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§™‡§æ‡§∞‡•ç‡§ï ‡§î‡§∞ ‡§™‡•ç‡§∞‡§∏‡§ø‡§¶‡•ç‡§ß ‡§ú‡•Å‡§¨‡§≤‡•Ä ‡§™‡§æ‡§∞‡•ç‡§ï ‡§π‡•à‡•§",
      highlights: ["Jubilee Park", "Dalma Wildlife Sanctuary", "Tata Steel Zoological Park", "Dimna Lake"],
      hindiHighlights: ["‡§ú‡•Å‡§¨‡§≤‡•Ä ‡§™‡§æ‡§∞‡•ç‡§ï", "‡§¶‡§≤‡§Æ‡§æ ‡§µ‡§®‡•ç‡§Ø‡§ú‡•Ä‡§µ ‡§Ö‡§≠‡§Ø‡§æ‡§∞‡§£‡•ç‡§Ø", "‡§ü‡§æ‡§ü‡§æ ‡§∏‡•ç‡§ü‡•Ä‡§≤ ‡§ú‡•Ç‡§≤‡•â‡§ú‡§ø‡§ï‡§≤ ‡§™‡§æ‡§∞‡•ç‡§ï", "‡§°‡§ø‡§Æ‡§®‡§æ ‡§ù‡•Ä‡§≤"],
      best_time: "October to March",
      hindiBestTime: "‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞ ‡§∏‡•á ‡§Æ‡§æ‡§∞‡•ç‡§ö",
      type: ["industrial", "city"],
    },
    deoghar: {
      name: "Deoghar",
      hindiName: "‡§¶‡•á‡§µ‡§ò‡§∞",
      description: "A important Hindu pilgrimage site known for the Baidyanath Temple, one of the twelve Jyotirlingas.",
      hindiDescription: "‡§è‡§ï ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡§ø‡§Ç‡§¶‡•Ç ‡§§‡•Ä‡§∞‡•ç‡§• ‡§∏‡•ç‡§•‡§≤ ‡§ú‡•ã ‡§¨‡§æ‡§¨‡§æ ‡§¨‡•à‡§¶‡•ç‡§Ø‡§®‡§æ‡§• ‡§Æ‡§Ç‡§¶‡§ø‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡§∏‡§ø‡§¶‡•ç‡§ß ‡§π‡•à, ‡§ú‡•ã ‡§¨‡§æ‡§∞‡§π ‡§ú‡•ç‡§Ø‡•ã‡§§‡§ø‡§∞‡•ç‡§≤‡§ø‡§Ç‡§ó‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§è‡§ï ‡§π‡•à‡•§",
      highlights: ["Baidyanath Temple", "Naulakha Mandir", "Satsanga Ashram", "Tapovan"],
      hindiHighlights: ["‡§¨‡•à‡§¶‡•ç‡§Ø‡§®‡§æ‡§• ‡§Æ‡§Ç‡§¶‡§ø‡§∞", "‡§®‡•å‡§≤‡§ñ‡§æ ‡§Æ‡§Ç‡§¶‡§ø‡§∞", "‡§∏‡§§‡•ç‡§∏‡§Ç‡§ó ‡§Ü‡§∂‡•ç‡§∞‡§Æ", "‡§§‡§™‡•ã‡§µ‡§®"],
      best_time: "October to March",
      hindiBestTime: "‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞ ‡§∏‡•á ‡§Æ‡§æ‡§∞‡•ç‡§ö",
      type: ["religious", "pilgrimage"],
    },
    hazaribagh: {
      name: "Hazaribagh",
      hindiName: "‡§π‡§ú‡§æ‡§∞‡•Ä‡§¨‡§æ‡§ó",
      description: "Known for its national park, beautiful lakes, and pleasant climate. A great destination for wildlife enthusiasts.",
      hindiDescription: "‡§Ö‡§™‡§®‡•á ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§â‡§¶‡•ç‡§Ø‡§æ‡§®, ‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§ù‡•Ä‡§≤‡•ã‡§Ç ‡§î‡§∞ ‡§∏‡•Å‡§π‡§æ‡§µ‡§®‡•á ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡§æ‡§®‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§ ‡§µ‡§®‡•ç‡§Ø‡§ú‡•Ä‡§µ ‡§™‡•ç‡§∞‡•á‡§Æ‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§∂‡§æ‡§®‡§¶‡§æ‡§∞ ‡§ó‡§Ç‡§§‡§µ‡•ç‡§Ø‡•§",
      highlights: ["Hazaribagh National Park", "Hazaribagh Lake", "Iskon Temple", "Rajrappa Mandir"],
      hindiHighlights: ["‡§π‡§ú‡§æ‡§∞‡•Ä‡§¨‡§æ‡§ó ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§â‡§¶‡•ç‡§Ø‡§æ‡§®", "‡§π‡§ú‡§æ‡§∞‡•Ä‡§¨‡§æ‡§ó ‡§ù‡•Ä‡§≤", "‡§á‡§∏‡•ç‡§ï‡•â‡§® ‡§Æ‡§Ç‡§¶‡§ø‡§∞", "‡§∞‡§æ‡§ú‡§∞‡§™‡•ç‡§™‡§æ ‡§Æ‡§Ç‡§¶‡§ø‡§∞"],
      best_time: "October to March",
      hindiBestTime: "‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞ ‡§∏‡•á ‡§Æ‡§æ‡§∞‡•ç‡§ö",
      type: ["wildlife", "eco-tourism"],
    }
  },
  culture: {
    festivals: ["Sarhul", "Karma", "Tusu", "Holi", "Chhath Puja"],
    hindiFestivals: ["‡§∏‡§∞‡§π‡•Å‡§≤", "‡§ï‡§∞‡•ç‡§Æ‡§æ", "‡§ü‡•Å‡§∏‡•Ç", "‡§π‡•ã‡§≤‡•Ä", "‡§õ‡§† ‡§™‡•Ç‡§ú‡§æ"],
    tribes: ["Santhal", "Munda", "Oraon", "Ho", "Kharia"],
    hindiTribes: ["‡§∏‡§Ç‡§•‡§æ‡§≤", "‡§Æ‡•Å‡§Ç‡§°‡§æ", "‡§ì‡§∞‡§æ‡§Å‡§µ", "‡§π‡•ã", "‡§ñ‡§°‡§º‡§ø‡§Ø‡§æ"],
    languages: ["Hindi", "Santhali", "Mundari", "Ho", "Kurukh"],
    hindiLanguages: ["‡§π‡§ø‡§Ç‡§¶‡•Ä", "‡§∏‡§Ç‡§•‡§æ‡§≤‡•Ä", "‡§Æ‡•Å‡§Ç‡§°‡§æ‡§∞‡•Ä", "‡§π‡•ã", "‡§ï‡•Å‡§∞‡•Å‡§ñ"],
    cuisine: ["Litti Chokha", "Thekua", "Rugra", "Bamboo Shoot Curry", "Handia"],
    hindiCuisine: ["‡§≤‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ö‡•ã‡§ñ‡§æ", "‡§†‡•á‡§ï‡•Å‡§Ü", "‡§∞‡•Å‡§ó‡§°‡§º‡§æ", "‡§¨‡§æ‡§Ç‡§∏ ‡§ï‡•Ä ‡§ï‡•ã‡§™‡§≤ ‡§ï‡•Ä ‡§ï‡§∞‡•Ä", "‡§π‡§Ç‡§°‡§ø‡§Ø‡§æ"]
  }
};

// Language management
const SUPPORTED_LANGUAGES = {
  en: { code: 'en', name: 'English', nativeName: 'English', emoji: 'üá∫üá∏' },
  hi: { code: 'hi', name: 'Hindi', nativeName: '‡§π‡§ø‡§Ç‡§¶‡•Ä', emoji: 'üáÆüá≥' }
};

// Cache system
const responseCache = new Map();
const CACHE_DURATION = 5 * 60 * 1000;

// Helper functions
const getCurrentLanguage = () => {
  try {
    return localStorage.getItem('chatbot_language') || 'en';
  } catch (error) {
    return 'en';
  }
};

const setCurrentLanguage = (languageCode) => {
  try {
    if (SUPPORTED_LANGUAGES[languageCode]) {
      localStorage.setItem('chatbot_language', languageCode);
      return true;
    }
    return false;
  } catch (error) {
    return false;
  }
};

const getTranslatedKnowledge = (language = 'en') => {
  if (language === 'hi') {
    return {
      destinations: Object.fromEntries(
        Object.entries(JHARKHAND_KNOWLEDGE.destinations).map(([key, value]) => [
          key,
          {
            name: value.hindiName || value.name,
            description: value.hindiDescription || value.description,
            highlights: value.hindiHighlights || value.highlights,
            best_time: value.hindiBestTime || value.best_time,
            type: value.type
          }
        ])
      ),
      culture: {
        festivals: JHARKHAND_KNOWLEDGE.culture.hindiFestivals || JHARKHAND_KNOWLEDGE.culture.festivals,
        tribes: JHARKHAND_KNOWLEDGE.culture.hindiTribes || JHARKHAND_KNOWLEDGE.culture.tribes,
        languages: JHARKHAND_KNOWLEDGE.culture.hindiLanguages || JHARKHAND_KNOWLEDGE.culture.languages,
        cuisine: JHARKHAND_KNOWLEDGE.culture.hindiCuisine || JHARKHAND_KNOWLEDGE.culture.cuisine
      }
    };
  }
  return JHARKHAND_KNOWLEDGE;
};

// Rule-based response generator
const generateResponse = (message, language = 'en') => {
  const lowerMessage = message.toLowerCase();
  const currentKnowledge = getTranslatedKnowledge(language);
  const destinations = currentKnowledge.destinations;
  
  // Check cache first
  const cacheKey = `${message}_${language}`;
  const cachedResponse = responseCache.get(cacheKey);
  if (cachedResponse && (Date.now() - cachedResponse.timestamp < CACHE_DURATION)) {
    return cachedResponse.response;
  }
  
  let response = '';
  
  // Language detection and switching
  if (/(‡§π‡§ø‡§Ç‡§¶‡•Ä|hindi|language|‡§≠‡§æ‡§∑‡§æ)/i.test(message) && /(change|switch|‡§¨‡§¶‡§≤‡•ã|‡§ï‡§∞‡•á‡§Ç)/i.test(message)) {
    const newLanguage = language === 'en' ? 'hi' : 'en';
    setCurrentLanguage(newLanguage);
    response = newLanguage === 'hi' ? 
      "‡§≠‡§æ‡§∑‡§æ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤ ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à! üåê" : 
      "Language changed to English! üåê";
    
    responseCache.set(cacheKey, {
      response: response,
      timestamp: Date.now()
    });
    
    return response;
  }
  
  // Greetings
  if (language === 'hi') {
    if (/(‡§®‡§Æ‡§∏‡•ç‡§§‡•á|‡§π‡•à‡§≤‡•ã|‡§π‡§æ‡§Ø|hi|hello)/.test(lowerMessage)) {
      response = "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! üëã ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§ü‡•ç‡§∞‡•à‡§µ‡§≤ ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§™‡§ï‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?";
    }
    else if (/(‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶|thank you|thanks)/.test(lowerMessage)) {
      response = "‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! üòä ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§î‡§∞ ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?";
    }
    else if (/(‡§™‡§∞‡•ç‡§Ø‡§ü‡§® ‡§∏‡•ç‡§•‡§≤|‡§ú‡§ó‡§π|destination|place)/.test(lowerMessage)) {
      const destinationNames = Object.values(destinations).map(d => d.name).join(', ');
      response = `‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§ï‡•á ‡§™‡•ç‡§∞‡§Æ‡•Å‡§ñ ‡§™‡§∞‡•ç‡§Ø‡§ü‡§® ‡§∏‡•ç‡§•‡§≤: ${destinationNames}‡•§ ‡§ï‡§ø‡§∏ ‡§∏‡•ç‡§•‡§æ‡§® ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§ß‡§ø‡§ï ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á? üó∫Ô∏è`;
    }
    else if (/(‡§®‡•á‡§§‡§∞‡§π‡§æ‡§ü|netarhat)/.test(lowerMessage)) {
      const dest = destinations.netarhat;
      response = `${dest.name}: ${dest.description}\n‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Ü‡§ï‡§∞‡•ç‡§∑‡§£: ${dest.highlights.join(', ')}\n‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡§Æ‡§Ø: ${dest.best_time} üèûÔ∏è`;
    }
    else if (/(‡§∞‡§æ‡§Ç‡§ö‡•Ä|ranchi)/.test(lowerMessage)) {
      const dest = destinations.ranchi;
      response = `${dest.name}: ${dest.description}\n‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Ü‡§ï‡§∞‡•ç‡§∑‡§£: ${dest.highlights.join(', ')}\n‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡§Æ‡§Ø: ${dest.best_time} üåä`;
    }
    else if (/(‡§ú‡§Æ‡§∂‡•á‡§¶‡§™‡•Å‡§∞|jamshedpur)/.test(lowerMessage)) {
      const dest = destinations.jamshedpur;
      response = `${dest.name}: ${dest.description}\n‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Ü‡§ï‡§∞‡•ç‡§∑‡§£: ${dest.highlights.join(', ')}\n‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡§Æ‡§Ø: ${dest.best_time} üè≠`;
    }
    else if (/(‡§¶‡•á‡§µ‡§ò‡§∞|deoghar)/.test(lowerMessage)) {
      const dest = destinations.deoghar;
      response = `${dest.name}: ${dest.description}\n‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Ü‡§ï‡§∞‡•ç‡§∑‡§£: ${dest.highlights.join(', ')}\n‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡§Æ‡§Ø: ${dest.best_time} üõï`;
    }
    else if (/(‡§π‡§ú‡§æ‡§∞‡•Ä‡§¨‡§æ‡§ó|hazaribagh)/.test(lowerMessage)) {
      const dest = destinations.hazaribagh;
      response = `${dest.name}: ${dest.description}\n‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Ü‡§ï‡§∞‡•ç‡§∑‡§£: ${dest.highlights.join(', ')}\n‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡§Æ‡§Ø: ${dest.best_time} ü¶å`;
    }
    else if (/(‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø|culture|‡§§‡•ç‡§Ø‡•ã‡§π‡§æ‡§∞|festival)/.test(lowerMessage)) {
      response = `‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§ï‡•Ä ‡§∏‡§Æ‡•É‡§¶‡•ç‡§ß ‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•à‡§Ç:\n‡§§‡•ç‡§Ø‡•ã‡§π‡§æ‡§∞: ${currentKnowledge.culture.festivals.join(', ')}\n‡§ú‡§®‡§ú‡§æ‡§§‡§ø‡§Ø‡§æ‡§Å: ${currentKnowledge.culture.tribes.join(', ')}\n‡§≠‡§æ‡§∑‡§æ‡§è‡§Å: ${currentKnowledge.culture.languages.join(', ')}\n‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§≠‡•ã‡§ú‡§®: ${currentKnowledge.culture.cuisine.join(', ')} üé≠`;
    }
    else if (/(‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ|itinerary|plan|‡§Ø‡•ã‡§ú‡§®‡§æ)/.test(lowerMessage)) {
      response = "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ ‡§¨‡§®‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç! ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç:\n1. ‡§Ü‡§™ ‡§ï‡§ø‡§§‡§®‡•á ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§ï‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§®‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç?\n2. ‡§Ü‡§™‡§ï‡•Ä ‡§∞‡•Å‡§ö‡§ø‡§Ø‡§æ‡§Å ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç? (‡§ú‡•à‡§∏‡•á ‡§™‡•ç‡§∞‡§ï‡•É‡§§‡§ø, ‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø, ‡§§‡•Ä‡§∞‡•ç‡§•‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ, ‡§µ‡§®‡•ç‡§Ø‡§ú‡•Ä‡§µ) üìÖ";
    }
    else {
      response = "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§ï‡§æ ‡§™‡§§‡§æ ‡§≤‡§ó‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•Ç‡§Ç! ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§™‡§∞‡•ç‡§Ø‡§ü‡§® ‡§∏‡•ç‡§•‡§≤‡•ã‡§Ç, ‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø, ‡§Ü‡§µ‡§æ‡§∏, ‡§™‡§∞‡§ø‡§µ‡§π‡§® ‡§Ø‡§æ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§®‡•á‡§§‡§∞‡§π‡§æ‡§ü, ‡§∞‡§æ‡§Ç‡§ö‡•Ä, ‡§ú‡§Æ‡§∂‡•á‡§¶‡§™‡•Å‡§∞, ‡§¶‡•á‡§µ‡§ò‡§∞, ‡§π‡§ú‡§æ‡§∞‡•Ä‡§¨‡§æ‡§ó ‡§î‡§∞ ‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§ï‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ üåÑ";
    }
  } else {
    // English responses
    if (/(hello|hi|hey|namaste)/.test(lowerMessage)) {
      response = "Namaste! üëã I'm your Jharkhand travel assistant. How can I help you plan your trip today?";
    }
    else if (/(thanks|thank you|dhanyavad)/.test(lowerMessage)) {
      response = "You're welcome! üòä Is there anything else you'd like to know about Jharkhand?";
    }
    else if (/(destination|place|tourist|attraction)/.test(lowerMessage)) {
      const destinationNames = Object.values(destinations).map(d => d.name).join(', ');
      response = `Popular tourist destinations in Jharkhand: ${destinationNames}. Which place would you like to know more about? üó∫Ô∏è`;
    }
    else if (/(netarhat)/.test(lowerMessage)) {
      const dest = destinations.netarhat;
      response = `${dest.name}: ${dest.description}\nHighlights: ${dest.highlights.join(', ')}\nBest time: ${dest.best_time} üèûÔ∏è`;
    }
    else if (/(ranchi)/.test(lowerMessage)) {
      const dest = destinations.ranchi;
      response = `${dest.name}: ${dest.description}\nHighlights: ${dest.highlights.join(', ')}\nBest time: ${dest.best_time} üåä`;
    }
    else if (/(jamshedpur)/.test(lowerMessage)) {
      const dest = destinations.jamshedpur;
      response = `${dest.name}: ${dest.description}\nHighlights: ${dest.highlights.join(', ')}\nBest time: ${dest.best_time} üè≠`;
    }
    else if (/(deoghar)/.test(lowerMessage)) {
      const dest = destinations.deoghar;
      response = `${dest.name}: ${dest.description}\nHighlights: ${dest.highlights.join(', ')}\nBest time: ${dest.best_time} üõï`;
    }
    else if (/(hazaribagh)/.test(lowerMessage)) {
      const dest = destinations.hazaribagh;
      response = `${dest.name}: ${dest.description}\nHighlights: ${dest.highlights.join(', ')}\nBest time: ${dest.best_time} ü¶å`;
    }
    else if (/(culture|festival|tribe)/.test(lowerMessage)) {
      response = `Jharkhand's rich culture includes:\nFestivals: ${currentKnowledge.culture.festivals.join(', ')}\nTribes: ${currentKnowledge.culture.tribes.join(', ')}\nLanguages: ${currentKnowledge.culture.languages.join(', ')}\nTraditional Cuisine: ${currentKnowledge.culture.cuisine.join(', ')} üé≠`;
    }
    else if (/(itinerary|plan|tour|travel)/.test(lowerMessage)) {
      response = "I can create a travel itinerary for you! Please tell me:\n1. How many days are you planning to travel?\n2. What are your interests? (e.g., nature, culture, pilgrimage, wildlife) üìÖ";
    }
    else {
      response = "I'm here to help you explore Jharkhand! You can ask me about tourist destinations, cultural information, accommodation, transportation, or itinerary planning. I can provide information about Netarhat, Ranchi, Jamshedpur, Deoghar, Hazaribagh, and Jharkhand's culture. üåÑ";
    }
  }
  
  responseCache.set(cacheKey, {
    response: response,
    timestamp: Date.now()
  });
  
  return response;
};

// Simple itinerary generator
const generateItinerary = (preferences, language = 'en') => {
  const { days = 3, interests = [] } = preferences;
  const currentKnowledge = getTranslatedKnowledge(language);
  
  let itinerary = '';
  
  if (language === 'hi') {
    itinerary = `‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§ï‡•á ‡§≤‡§ø‡§è ${days}-‡§¶‡§ø‡§® ‡§ï‡§æ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ (${interests.join(', ')} ‡§™‡§∞ ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§§):\n\n`;
    
    if (days >= 3) {
      itinerary += "‡§¶‡§ø‡§® 1: ‡§∞‡§æ‡§Ç‡§ö‡•Ä ‡§Æ‡•á‡§Ç ‡§ù‡§∞‡§®‡•á ‡§î‡§∞ ‡§Æ‡§Ç‡§¶‡§ø‡§∞‡•ã‡§Ç ‡§ï‡§æ ‡§≠‡•ç‡§∞‡§Æ‡§£\n";
      itinerary += "‡§¶‡§ø‡§® 2: ‡§®‡•á‡§§‡§∞‡§π‡§æ‡§ü ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§∏‡•Å‡§Ç‡§¶‡§∞‡§§‡§æ ‡§ï‡§æ ‡§Ü‡§®‡§Ç‡§¶\n";
      if (days >= 4) itinerary += "‡§¶‡§ø‡§® 3: ‡§¶‡•á‡§µ‡§ò‡§∞ ‡§Æ‡•á‡§Ç ‡§§‡•Ä‡§∞‡•ç‡§•‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ\n";
      if (days >= 5) itinerary += "‡§¶‡§ø‡§® 4: ‡§π‡§ú‡§æ‡§∞‡•Ä‡§¨‡§æ‡§ó ‡§Æ‡•á‡§Ç ‡§µ‡§®‡•ç‡§Ø‡§ú‡•Ä‡§µ ‡§∏‡§´‡§æ‡§∞‡•Ä\n";
      if (days >= 6) itinerary += "‡§¶‡§ø‡§® 5: ‡§ú‡§Æ‡§∂‡•á‡§¶‡§™‡•Å‡§∞ ‡§Æ‡•á‡§Ç ‡§î‡§¶‡•ç‡§Ø‡•ã‡§ó‡§ø‡§ï ‡§¶‡§∞‡•ç‡§∂‡§®\n";
    } else {
      itinerary += "‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 3 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§ï‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§¶‡•Ä ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à ‡§§‡§æ‡§ï‡§ø ‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§ï‡•Ä ‡§µ‡§ø‡§µ‡§ø‡§ß‡§§‡§æ ‡§ï‡§æ ‡§™‡•Ç‡§∞‡§æ ‡§Ü‡§®‡§Ç‡§¶ ‡§≤‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡•á‡•§";
    }
    
    itinerary += "\n\n‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§¶‡•á‡§ñ‡•á‡§Ç ‡§Ø‡§æ ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§ü‡•Ç‡§∞ ‡§ë‡§™‡§∞‡•á‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§";
  } else {
    itinerary = `${days}-day itinerary for Jharkhand (focusing on ${interests.join(', ')}):\n\n`;
    
    if (days >= 3) {
      itinerary += "Day 1: Explore waterfalls and temples in Ranchi\n";
      itinerary += "Day 2: Enjoy natural beauty in Netarhat\n";
      if (days >= 4) itinerary += "Day 3: Pilgrimage in Deoghar\n";
      if (days >= 5) itinerary += "Day 4: Wildlife safari in Hazaribagh\n";
      if (days >= 6) itinerary += "Day 5: Industrial tour in Jamshedpur\n";
    } else {
      itinerary += "We recommend planning at least 3 days to fully enjoy Jharkhand's diversity.";
    }
    
    itinerary += "\n\nFor detailed planning, please visit our website or contact a local tour operator.";
  }
  
  return itinerary;

};

// Main service function
const sendMessage = async (message) => {
  const currentLanguage = getCurrentLanguage();
  
  try {
    const response = generateResponse(message, currentLanguage);
    return {
      response: response,
      language: currentLanguage
    };
  } catch (error) {
    console.error('Error in sendMessage:', error);
    const fallbackResponse = currentLanguage === 'hi' ? 
      "‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§Ö‡§≠‡•Ä ‡§ï‡•Å‡§õ ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§" : 
      "Sorry, I'm experiencing some technical issues. Please try again later.";
    
    return {
      response: fallbackResponse,
      error: error.message,
      language: currentLanguage
    };
  }
};

// Enhanced service object with language methods
const ChatbotService = {
  sendMessage,
  getRecommendations: async (preferences) => {
    const currentLanguage = getCurrentLanguage();
    try {
      const itinerary = generateItinerary(preferences, currentLanguage);
      
      return {
        itinerary: itinerary,
        days: preferences.days || 3,
        interests: preferences.interests || [],
        language: currentLanguage
      };
    } catch (error) {
      return { error: currentLanguage === 'hi' ? 
        "‡§Ö‡§≠‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§" : 
        "I'm having trouble generating recommendations right now." 
      };
    }
  },

  getCurrentLanguage: () => ({
    code: getCurrentLanguage(),
    ...SUPPORTED_LANGUAGES[getCurrentLanguage()]
  }),

  setLanguage: (languageCode) => {
    if (SUPPORTED_LANGUAGES[languageCode]) {
      const success = setCurrentLanguage(languageCode);
      return {
        success,
        language: SUPPORTED_LANGUAGES[languageCode],
        message: success ? 
          `Language changed to ${SUPPORTED_LANGUAGES[languageCode].name}` :
          'Failed to change language'
      };
    }
    return { success: false, message: 'Unsupported language' };
  },

  getSupportedLanguages: () => Object.values(SUPPORTED_LANGUAGES),

  clearSession: () => {
    responseCache.clear();
  },
};

export default ChatbotService;