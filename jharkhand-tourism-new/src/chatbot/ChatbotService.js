// src/chatbot/ChatbotService.js
const JHARKHAND_KNOWLEDGE = {
  destinations: {
    netarhat: {
      name: "Netarhat",
      hindiName: "рдиреЗрддрд░рд╣рд╛рдЯ",
      description: "Netarhat is known as the 'Queen of Chotanagpur' and is famous for its breathtaking sunrises and sunsets. It's a perfect hill station for nature lovers.",
      hindiDescription: "рдиреЗрддрд░рд╣рд╛рдЯ 'рдЫреЛрдЯрд╛рдирд╛рдЧрдкреБрд░ рдХреА рд░рд╛рдиреА' рдХреЗ рдирд╛рдо рд╕реЗ рдЬрд╛рдирд╛ рдЬрд╛рддрд╛ рд╣реИ рдФрд░ рдЕрдкрдиреЗ рд▓реБрднрд╛рд╡рдиреЗ рд╕реВрд░реНрдпреЛрджрдп рдФрд░ рд╕реВрд░реНрдпрд╛рд╕реНрдд рдХреЗ рд▓рд┐рдП рдкреНрд░рд╕рд┐рджреНрдз рд╣реИред рдпрд╣ рдкреНрд░рдХреГрддрд┐ рдкреНрд░реЗрдорд┐рдпреЛрдВ рдХреЗ рд▓рд┐рдП рдПрдХ рдЖрджрд░реНрд╢ рд╣рд┐рд▓ рд╕реНрдЯреЗрд╢рди рд╣реИред",
      highlights: ["Sunrise Point", "Sunset Point", "Upper Ghaghri Falls", "Lower Ghaghri Falls", "Magnolia Point"],
      hindiHighlights: ["рд╕рдирд░рд╛рдЗрдЬ рдкреЙрдЗрдВрдЯ", "рд╕рдирд╕реЗрдЯ рдкреЙрдЗрдВрдЯ", "рдЕрдкрд░ рдШрд╛рдШрд░реА рдлреЙрд▓реНрд╕", "рд▓реЛрдЕрд░ рдШрд╛рдШрд░реА рдлреЙрд▓реНрд╕", "рдореИрдЧреНрдиреЛрд▓рд┐рдпрд╛ рдкреЙрдЗрдВрдЯ"],
      best_time: "October to March",
      hindiBestTime: "рдЕрдХреНрдЯреВрдмрд░ рд╕реЗ рдорд╛рд░реНрдЪ",
      type: ["eco-tourism", "hill station"],
    },
    ranchi: {
      name: "Ranchi",
      hindiName: "рд░рд╛рдВрдЪреА",
      description: "Capital city of Jharkhand, known for its waterfalls, temples, and pleasant climate.",
      hindiDescription: "рдЭрд╛рд░рдЦрдВрдб рдХреА рд░рд╛рдЬрдзрд╛рдиреА рд╢рд╣рд░, рдЕрдкрдиреЗ рдЭрд░рдиреЛрдВ, рдордВрджрд┐рд░реЛрдВ рдФрд░ рд╕реБрд╣рд╛рд╡рдиреЗ рдореМрд╕рдо рдХреЗ рд▓рд┐рдП рдЬрд╛рдирд╛ рдЬрд╛рддрд╛ рд╣реИред",
      highlights: ["Hundru Falls", "Jonha Falls", "Rock Garden", "Tagore Hill", "Pahari Mandir"],
      hindiHighlights: ["рд╣реБрдВрдбрд░реВ рдлреЙрд▓реНрд╕", "рдЬреЛрдиреНрд╣рд╛ рдлреЙрд▓реНрд╕", "рд░реЙрдХ рдЧрд╛рд░реНрдбрди", "рдЯреИрдЧреЛрд░ рд╣рд┐рд▓", "рдкрд╣рд╛рдбрд╝реА рдордВрджрд┐рд░"],
      best_time: "Throughout the year",
      hindiBestTime: "рдкреВрд░реЗ рд╕рд╛рд▓",
      type: ["cultural", "eco-tourism"],
    }
    // Add other destinations with Hindi translations...
  },
  culture: {
    festivals: ["Sarhul", "Karma", "Tusu", "Holi", "Chhath Puja"],
    hindiFestivals: ["рд╕рд░рд╣реБрд▓", "рдХрд░реНрдорд╛", "рдЯреБрд╕реВ", "рд╣реЛрд▓реА", "рдЫрда рдкреВрдЬрд╛"],
    tribes: ["Santhal", "Munda", "Oraon", "Ho", "Kharia"],
    hindiTribes: ["рд╕рдВрдерд╛рд▓", "рдореБрдВрдбрд╛", "рдУрд░рд╛рдБрд╡", "рд╣реЛ", "рдЦрдбрд╝рд┐рдпрд╛"],
    languages: ["Hindi", "Santhali", "Mundari", "Ho", "Kurukh"],
    hindiLanguages: ["рд╣рд┐рдВрджреА", "рд╕рдВрдерд╛рд▓реА", "рдореБрдВрдбрд╛рд░реА", "рд╣реЛ", "рдХреБрд░реБрдЦ"]
  }
};

// Language management
const SUPPORTED_LANGUAGES = {
  en: { code: 'en', name: 'English', nativeName: 'English', emoji: 'ЁЯЗ║ЁЯЗ╕' },
  hi: { code: 'hi', name: 'Hindi', nativeName: 'рд╣рд┐рдВрджреА', emoji: 'ЁЯЗоЁЯЗ│' }
};

// Cache system
const responseCache = new Map();
const CACHE_DURATION = 5 * 60 * 1000;

// Helper functions
const generateSessionId = () => {
  return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
};

const getSessionId = () => {
  try {
    let sessionId = localStorage.getItem('chatbot_session_id');
    if (!sessionId) {
      sessionId = generateSessionId();
      localStorage.setItem('chatbot_session_id', sessionId);
    }
    return sessionId;
  } catch (error) {
    return generateSessionId();
  }
};

const getCurrentLanguage = () => {
  try {
    return localStorage.getItem('chatbot_language') || 'en';
  } catch (error) {
    return 'en';
  }
};

const setCurrentLanguage = (languageCode) => {
  try {
    if (SUPPORTED_LANGUAGES[languageCode]) {
      localStorage.setItem('chatbot_language', languageCode);
      return true;
    }
    return false;
  } catch (error) {
    return false;
  }
};

const getTranslatedKnowledge = (language = 'en') => {
  if (language === 'hi') {
    // Return Hindi version of knowledge base
    return {
      destinations: Object.fromEntries(
        Object.entries(JHARKHAND_KNOWLEDGE.destinations).map(([key, value]) => [
          key,
          {
            name: value.hindiName || value.name,
            description: value.hindiDescription || value.description,
            highlights: value.hindiHighlights || value.highlights,
            best_time: value.hindiBestTime || value.best_time,
            type: value.type
          }
        ])
      ),
      culture: {
        festivals: JHARKHAND_KNOWLEDGE.culture.hindiFestivals || JHARKHAND_KNOWLEDGE.culture.festivals,
        tribes: JHARKHAND_KNOWLEDGE.culture.hindiTribes || JHARKHAND_KNOWLEDGE.culture.tribes,
        languages: JHARKHAND_KNOWLEDGE.culture.hindiLanguages || JHARKHAND_KNOWLEDGE.culture.languages
      }
    };
  }
  return JHARKHAND_KNOWLEDGE;
};

const saveChatToLocal = (sessionId, message, response, metadata = {}) => {
  try {
    const chatHistory = JSON.parse(localStorage.getItem('chat_history') || '{}');
    if (!chatHistory[sessionId]) {
      chatHistory[sessionId] = [];
    }
    
    chatHistory[sessionId].push({
      message,
      response,
      timestamp: new Date().toISOString(),
      language: metadata.language || getCurrentLanguage(),
      metadata
    });
    
    if (chatHistory[sessionId].length > 50) {
      chatHistory[sessionId] = chatHistory[sessionId].slice(-50);
    }
    
    localStorage.setItem('chat_history', JSON.stringify(chatHistory));
  } catch (error) {
    console.warn('Error saving chat to local storage:', error);
  }
};

const getChatHistoryFromLocal = (sessionId) => {
  try {
    const chatHistory = JSON.parse(localStorage.getItem('chat_history') || '{}');
    return chatHistory[sessionId] || [];
  } catch (error) {
    console.warn('Error reading chat history:', error);
    return [];
  }
};

// OpenAI API Integration with multilingual support
const callOpenAI = async (message, conversationHistory = [], language = 'en') => {
  const cacheKey = `${message}_${language}_${conversationHistory.length}`;
  const cachedResponse = responseCache.get(cacheKey);
  
  if (cachedResponse && (Date.now() - cachedResponse.timestamp < CACHE_DURATION)) {
    return cachedResponse.response;
  }

  const API_KEY = process.env.REACT_APP_OPENAI_API_KEY;
  
  if (!API_KEY) {
    throw new Error('OpenAI API key not configured');
  }

  const currentKnowledge = getTranslatedKnowledge(language);
  const systemPrompt = language === 'hi' ?
    `рдЖрдк рдЭрд╛рд░рдЦрдВрдб рдкрд░реНрдпрдЯрди рдХреЗ рд▓рд┐рдП рдПрдХ рд╕рд╣рд╛рдпрдХ рдЯреНрд░реИрд╡рд▓ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рд╣реИрдВред рд╣рд┐рдВрджреА рдореЗрдВ рдЬрд╡рд╛рдм рджреЗрдВред

рдореБрдЦреНрдп рдЬреНрдЮрд╛рди:
${JSON.stringify(currentKnowledge, null, 2)}

рджрд┐рд╢рд╛-рдирд┐рд░реНрджреЗрд╢:
- рд╡рд╛рд░реНрддрд╛рд▓рд╛рдк рд╢реИрд▓реА рдореЗрдВ рд▓реЗрдХрд┐рди рд╡реНрдпрд╡рд╕рд╛рдпрд┐рдХ рд░рд╣реЗрдВ
- рдХрднреА-рдХрднреА рдЗрдореЛрдЬреА рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВ (1-2 рдкреНрд░рддрд┐ рдЙрддреНрддрд░)
- рдЙрддреНрддрд░ 150 рд╢рдмреНрджреЛрдВ рд╕реЗ рдХрдо рд░рдЦреЗрдВ
- рдЭрд╛рд░рдЦрдВрдб-рд╡рд┐рд╢рд┐рд╖реНрдЯ рдЬрд╛рдирдХрд╛рд░реА рдкрд░ рдзреНрдпрд╛рди рджреЗрдВ
- рдЕрдиреБрд╡рд░реНрддреА рдкреНрд░рд╢реНрди рд╕реБрдЭрд╛рдПрдВ
- рдЕрдЧрд░ рдкрддрд╛ рдирд╣реАрдВ рд╣реИ, рддреЛ рдХрд╣реЗрдВ "рдореЗрд░реЗ рдкрд╛рд╕ рдпрд╣ рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рд╣реИ рд▓реЗрдХрд┐рди рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ..."
- рдпрд╛рддреНрд░рд╛ рдХрд╛рд░реНрдпрдХреНрд░рдо рдХреЗ рд▓рд┐рдП рд╕реНрдкрд╖реНрдЯреАрдХрд░рдг рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ` :
    `You are a helpful travel assistant for Jharkhand Tourism. Respond in ${language}.

KEY KNOWLEDGE:
${JSON.stringify(currentKnowledge, null, 2)}

GUIDELINES:
- Be conversational but professional
- Use emojis sparingly (1-2 per response)
- Keep responses under 150 words
- Focus on Jharkhand-specific information
- Suggest follow-up questions
- If unsure, say "I don't have that information but I can help you with..."
- For itinerary requests, ask clarifying questions`;

  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 10000);

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          ...conversationHistory.slice(-8),
          { role: 'user', content: message }
        ],
        max_tokens: 300,
        temperature: 0.8,
      }),
      signal: controller.signal
    });

    clearTimeout(timeoutId);

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error?.message || `HTTP ${response.status}`);
    }

    const data = await response.json();
    const aiResponse = data.choices[0].message.content;
    
    responseCache.set(cacheKey, {
      response: aiResponse,
      timestamp: Date.now()
    });

    return aiResponse;

  } catch (error) {
    console.error('OpenAI API error:', error);
    throw error;
  }
};

// Enhanced fallback responses with multilingual support
const getFallbackResponse = (message, language = 'en') => {
  const lowerMessage = message.toLowerCase();
  const currentKnowledge = getTranslatedKnowledge(language);

  if (language === 'hi') {
    // Hindi fallback responses
    if (/(рдирдорд╕реНрддреЗ|рд╣реИрд▓реЛ|рд╣рд╛рдп|hi|hello)/.test(lowerMessage)) {
      return "рдирдорд╕реНрддреЗ! ЁЯСЛ рдореИрдВ рдЖрдкрдХрд╛ рдЭрд╛рд░рдЦрдВрдб рдЯреНрд░реИрд╡рд▓ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рд╣реВрдВред рдЖрдкрдХреА рдпрд╛рддреНрд░рд╛ рдХреА рдпреЛрдЬрдирд╛ рдмрдирд╛рдиреЗ рдореЗрдВ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?";
    }
    
    if (/(рдиреЗрддрд░рд╣рд╛рдЯ|hill station|netarhat)/.test(lowerMessage)) {
      const dest = currentKnowledge.destinations.netarhat;
      return `${dest.name}: ${dest.description}\nрдореБрдЦреНрдп рдЖрдХрд░реНрд╖рдг: ${dest.highlights.join(', ')}\nрд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛ рд╕рдордп: ${dest.best_time}`;
    }

    if (/(рдзрдиреНрдпрд╡рд╛рдж|thank you|thanks)/.test(lowerMessage)) {
      return "рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯШК рдХреНрдпрд╛ рдЖрдк рдЭрд╛рд░рдЦрдВрдб рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреБрдЫ рдФрд░ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?";
    }

    return "рдореИрдВ рдЖрдкрдХреЛ рдЭрд╛рд░рдЦрдВрдб рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рдиреЗ рдореЗрдВ рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реВрдВ! рдЖрдк рдореБрдЭрд╕реЗ рдкрд░реНрдпрдЯрди рд╕реНрдерд▓реЛрдВ, рд╕рдВрд╕реНрдХреГрддрд┐, рдЖрд╡рд╛рд╕, рдкрд░рд┐рд╡рд╣рди рдпрд╛ рдпрд╛рддреНрд░рд╛ рдпреЛрдЬрдирд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВред";
  }

  // English fallback responses
  if (/(hello|hi|hey|namaste)/.test(lowerMessage)) {
    return "Namaste! ЁЯСЛ I'm your Jharkhand travel assistant. How can I help you plan your trip today?";
  }
  
  if (/(netarhat|hill station)/.test(lowerMessage)) {
    const dest = currentKnowledge.destinations.netarhat;
    return `${dest.name}: ${dest.description}\nHighlights: ${dest.highlights.join(', ')}\nBest time: ${dest.best_time}`;
  }

  if (/(thanks|thank you|dhanyavad)/.test(lowerMessage)) {
    return "You're welcome! ЁЯШК Is there anything else you'd like to know about Jharkhand?";
  }

  return "I'm here to help you explore Jharkhand! You can ask me about tourist destinations, cultural information, accommodation, transportation, or itinerary planning.";
};

// Main service function with language support
const sendMessage = async (message, sessionId = null) => {
  const currentSessionId = sessionId || getSessionId();
  const currentLanguage = getCurrentLanguage();
  const startTime = Date.now();
  
  try {
    const history = getChatHistoryFromLocal(currentSessionId);
    const conversationHistory = history.flatMap(item => [
      { role: 'user', content: item.message },
      { role: 'assistant', content: item.response }
    ]);

    // Check if user is requesting language change
    if (/(рд╣рд┐рдВрджреА|hindi|language|рднрд╛рд╖рд╛)/i.test(message) && /(change|switch|рдмрджрд▓реЛ|рдХрд░реЗрдВ)/i.test(message)) {
      const newLanguage = currentLanguage === 'en' ? 'hi' : 'en';
      setCurrentLanguage(newLanguage);
      const response = newLanguage === 'hi' ? 
        "рднрд╛рд╖рд╛ рд╣рд┐рдВрджреА рдореЗрдВ рдмрджрд▓ рджреА рдЧрдИ рд╣реИ! ЁЯМР" : 
        "Language changed to English! ЁЯМР";
      
      saveChatToLocal(currentSessionId, message, response, { 
        source: 'language_change',
        language: newLanguage
      });
      
      return {
        response: response,
        session_id: currentSessionId,
        language: newLanguage
      };
    }

    const response = await callOpenAI(message, conversationHistory, currentLanguage);
    
    saveChatToLocal(currentSessionId, message, response, { 
      source: 'openai',
      language: currentLanguage,
      response_time: Date.now() - startTime
    });
    
    return {
      response: response,
      session_id: currentSessionId,
      language: currentLanguage
    };

  } catch (error) {
    console.error('Error in sendMessage:', error);
    
    const fallbackResponse = getFallbackResponse(message, getCurrentLanguage());
    
    saveChatToLocal(currentSessionId, message, fallbackResponse, { 
      source: 'fallback',
      error: error.message,
      language: getCurrentLanguage()
    });
    
    return {
      response: fallbackResponse,
      session_id: currentSessionId,
      error: error.message,
      language: getCurrentLanguage()
    };
  }
};

// Enhanced service object with language methods
const ChatbotService = {
  sendMessage,
  getRecommendations: async (preferences) => {
    const currentLanguage = getCurrentLanguage();
    try {
      const { days = 3, interests = [] } = preferences;
      const prompt = currentLanguage === 'hi' ?
        `${days}-рджрд┐рди рдХрд╛ рдЭрд╛рд░рдЦрдВрдб рдХреЗ рд▓рд┐рдП рдпрд╛рддреНрд░рд╛ рдХрд╛рд░реНрдпрдХреНрд░рдо рдмрдирд╛рдПрдВ рдЬреЛ ${interests.join(', ')} рдкрд░ рдХреЗрдВрджреНрд░рд┐рдд рд╣реЛред` :
        `Create a ${days}-day itinerary for Jharkhand focusing on ${interests.join(', ')}.`;
      
      const response = await callOpenAI(prompt, [], currentLanguage);
      
      return {
        itinerary: response,
        days: days,
        interests: interests,
        language: currentLanguage
      };
    } catch (error) {
      return { error: currentLanguage === 'hi' ? 
        "рдЕрднреА рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдЙрддреНрдкрдиреНрди рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реЛ рд░рд╣реА рд╣реИред" : 
        "I'm having trouble generating recommendations right now." 
      };
    }
  },

  getChatHistory: async () => {
    const sessionId = getSessionId();
    const history = getChatHistoryFromLocal(sessionId);
    return { messages: history };
  },

  getCurrentLanguage: () => ({
    code: getCurrentLanguage(),
    ...SUPPORTED_LANGUAGES[getCurrentLanguage()]
  }),

  setLanguage: (languageCode) => {
    if (SUPPORTED_LANGUAGES[languageCode]) {
      const success = setCurrentLanguage(languageCode);
      return {
        success,
        language: SUPPORTED_LANGUAGES[languageCode],
        message: success ? 
          `Language changed to ${SUPPORTED_LANGUAGES[languageCode].name}` :
          'Failed to change language'
      };
    }
    return { success: false, message: 'Unsupported language' };
  },

  getSupportedLanguages: () => Object.values(SUPPORTED_LANGUAGES),

  clearSession: () => {
    localStorage.removeItem('chatbot_session_id');
    responseCache.clear();
  },

  exportChatHistory: () => {
    const sessionId = getSessionId();
    const history = getChatHistoryFromLocal(sessionId);
    return JSON.stringify(history, null, 2);
  }
};

export default ChatbotService;