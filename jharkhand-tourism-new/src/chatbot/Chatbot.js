// src/chatbot/Chatbot.js
import React, { useState, useEffect, useRef } from 'react';
import ChatbotService from './ChatbotService';
import './Chatbot.css';

// Language Switcher Component (improved accessibility and labels)
const LanguageSwitcher = ({ currentLanguage, onLanguageChange }) => {
  const [isOpen, setIsOpen] = useState(false);

  const languages = [
    { code: 'en', name: 'English', nativeName: 'English', emoji: 'üá∫üá∏' },
    { code: 'hi', name: 'Hindi', nativeName: '‡§π‡§ø‡§Ç‡§¶‡•Ä', emoji: 'üáÆüá≥' }
  ];

  const current = languages.find(lang => lang.code === currentLanguage);

  return (
    <div className="language-switcher">
      <button 
        className="language-toggle"
        onClick={() => setIsOpen(!isOpen)}
        aria-haspopup="listbox"
        aria-expanded={isOpen}
        aria-label={currentLanguage === 'hi' ? '‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡•á‡§Ç' : 'Change language'}
        title={currentLanguage === 'hi' ? '‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡•á‡§Ç' : 'Change language'}
      >
        <span aria-hidden="true">{current?.emoji || 'üåê'}</span>
      </button>
      
      {isOpen && (
        <div className="language-dropdown" role="listbox" aria-label={currentLanguage === 'hi' ? '‡§≠‡§æ‡§∑‡§æ ‡§ö‡§Ø‡§®‡§ï‡§∞‡•ç‡§§‡§æ' : 'Language selector'}>
          {languages.map((language) => (
            <button
              key={language.code}
              className={`language-option ${currentLanguage === language.code ? 'active' : ''}`}
              role="option"
              aria-selected={currentLanguage === language.code}
              onClick={() => {
                onLanguageChange(language.code);
                setIsOpen(false);
              }}
            >
              <span className="language-emoji" aria-hidden="true">{language.emoji}</span>
              <span className="language-name">{language.nativeName} ({language.name})</span>
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

// Main Chatbot Component
const Chatbot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showOptions, setShowOptions] = useState(false);
  const [currentLanguage, setCurrentLanguage] = useState('en');
  const messagesEndRef = useRef(null);

  // Predefined quick options
  const quickOptions = {
    en: [
      "Best places to visit in Jharkhand?",
      "Eco-tourism destinations",
      "Cultural festivals",
      "Adventure activities",
      "Plan my itinerary",
      "Accommodation options"
    ],
    hi: [
      "‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§ò‡•Ç‡§Æ‡§®‡•á ‡§ï‡•Ä ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§ú‡§ó‡§π‡•á‡§Ç?",
      "‡§à‡§ï‡•ã-‡§ü‡•Ç‡§∞‡§ø‡§ú‡•ç‡§Æ ‡§∏‡•ç‡§•‡§≤",
      "‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§§‡•ç‡§Ø‡•ã‡§π‡§æ‡§∞",
      "‡§∏‡§æ‡§π‡§∏‡§ø‡§ï ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø‡§Ø‡§æ‡§Å",
      "‡§Æ‡•á‡§∞‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç",
      "‡§Ü‡§µ‡§æ‡§∏ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™"
    ]
  };

  // On mount: load saved language preference only
  useEffect(() => {
    const savedLanguage = localStorage.getItem('chatbot_language');
    if (savedLanguage) {
      setCurrentLanguage(savedLanguage);
    }
  }, []);

  // Scroll to bottom when messages change
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  // Removed loading chat history to keep conversation in-memory only

  const handleSendMessage = async (message = null) => {
    const finalMessage = message || inputMessage.trim();
    if (!finalMessage) return;

    // Add user message to chat
    const userMessage = { 
      type: 'user', 
      text: finalMessage, 
      timestamp: new Date()
    };
    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);
    setShowOptions(false);

    try {
      // Send to service
      const response = await ChatbotService.sendMessage(finalMessage);
      
      // Add bot response to chat
      const botMessage = { 
        type: 'bot', 
        text: response.response, 
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, botMessage]);
      
      // Update language if changed by the service
      if (response.language && response.language !== currentLanguage) {
        setCurrentLanguage(response.language);
      }
    } catch (error) {
      console.error('Error sending message:', error);
      const errorMessage = { 
        type: 'bot', 
        text: currentLanguage === 'hi' 
          ? "‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§Æ‡•à‡§Ç ‡§Ö‡§≠‡•Ä ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§" 
          : "Sorry, I'm having trouble responding. Please try again later.", 
        timestamp: new Date() 
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleQuickOptionClick = (option) => {
    handleSendMessage(option);
  };

  const handleLanguageChange = async (languageCode) => {
    try {
      const result = ChatbotService.setLanguage(languageCode);
      if (result.success) {
        setCurrentLanguage(languageCode);
        
        // Add language change confirmation message
        const confirmationMessage = {
          type: 'bot',
          text: languageCode === 'hi' 
            ? "‡§≠‡§æ‡§∑‡§æ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤ ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à! üåê" 
            : "Language changed to English! üåê",
          timestamp: new Date()
        };
        
        setMessages(prev => [...prev, confirmationMessage]);
      }
    } catch (error) {
      console.error('Error changing language:', error);
    }
  };

  const toggleChat = () => {
    setIsOpen(!isOpen);
    if (!isOpen) {
      setShowOptions(true);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const formatTimestamp = (timestamp) => {
    try {
      if (timestamp instanceof Date) {
        return timestamp.toLocaleTimeString();
      } else if (typeof timestamp === 'string') {
        return new Date(timestamp).toLocaleTimeString();
      }
      return new Date().toLocaleTimeString();
    } catch (error) {
      return new Date().toLocaleTimeString();
    }
  };

  return (
    <div className="chatbot-container">
      {!isOpen && (
        <button className="chatbot-toggle" onClick={toggleChat}>
          <span>üí¨</span>
          {currentLanguage === 'hi' ? '‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§∏‡§π‡§æ‡§Ø‡§ï' : 'Travel Assistant'}
        </button>
      )}
      
      {isOpen && (
        <div className="chatbot-window">
          <div className="chatbot-header">
            <h3>{currentLanguage === 'hi' ? '‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§™‡§∞‡•ç‡§Ø‡§ü‡§® ‡§∏‡§π‡§æ‡§Ø‡§ï' : 'Jharkhand Tourism Assistant'}</h3>
            <div className="header-controls">
              <LanguageSwitcher 
                currentLanguage={currentLanguage} 
                onLanguageChange={handleLanguageChange} 
              />
              <button className="close-btn" onClick={toggleChat}>√ó</button>
            </div>
          </div>
          
          <div className="chatbot-messages">
            {messages.length === 0 && (
              <div className="welcome-message">
                <p>{currentLanguage === 'hi' ? '‡§®‡§Æ‡§∏‡•ç‡§§‡•á! üëã ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§ü‡•ç‡§∞‡•à‡§µ‡§≤ ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•Ç‡§Ç‡•§' : 'Namaste! üëã I\'m your Jharkhand travel assistant.'}</p>
                <p>{currentLanguage === 'hi' ? '‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?' : 'How can I help you plan your trip today?'}</p>
              </div>
            )}
            
            {messages.map((msg, index) => (
              <div key={index} className={`message ${msg.type}`}>
                <div className="message-content">
                  {msg.text}
                </div>
                <span className="message-time">
                  {formatTimestamp(msg.timestamp)}
                </span>
              </div>
            ))}
            
            {isLoading && (
              <div className="message bot">
                <div className="message-content">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            )}
            
            {showOptions && messages.length === 0 && (
              <div className="quick-options">
                <p>{currentLanguage === 'hi' ? '‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®:' : 'Quick questions:'}</p>
                {quickOptions[currentLanguage].map((option, index) => (
                  <button
                    key={index}
                    className="quick-option-btn"
                    onClick={() => handleQuickOptionClick(option)}
                  >
                    {option}
                  </button>
                ))}
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>
          
          <div className="chatbot-input">
            <input
              type="text"
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={currentLanguage === 'hi' ? '‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§™‡§∞‡•ç‡§Ø‡§ü‡§® ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç...' : 'Ask about Jharkhand tourism...'}
              disabled={isLoading}
            />
            <button 
              onClick={() => handleSendMessage()} 
              disabled={isLoading || !inputMessage.trim()}
            >
              {currentLanguage === 'hi' ? '‡§≠‡•á‡§ú‡•á‡§Ç' : 'Send'}
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Chatbot;